(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{579:function(v,t,_){"use strict";_.r(t);var e=_(19),s=Object(e.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"移动端兼容性概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#移动端兼容性概念"}},[v._v("#")]),v._v(" 移动端兼容性概念")]),v._v(" "),_("h3",{attrs:{id:"移动端兼容发展流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#移动端兼容发展流程"}},[v._v("#")]),v._v(" 移动端兼容发展流程")]),v._v(" "),_("ol",[_("li",[v._v("静态布局：过"),_("code",[v._v("<meta>")]),v._v("标签中的 applicable-device 应用设备标识识别移动设备")])]),v._v(" "),_("p",[v._v("即"),_("code",[v._v("<meta name = 'applicable-device' content = 'mobile'>")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("流式布局：使用百分比%定义宽度，高度使用 px 固定，根据可视区域大小实时进行尺寸调整，通常使用 max-width/min-width 控制尺寸范围过大或者过小")])]),v._v(" "),_("p",[v._v("缺点：在大屏手机或横竖屏切换场景下可能会导致页面元素被拉伸变形，字体大小无法随屏幕大小发生变化。")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("弹性布局：em/rem")])]),v._v(" "),_("p",[v._v("包裹文字的元素的尺寸采用 em/rem 为单位，页面主要划分区域的尺寸依据情况使用 px、百分数或者 em/rem")]),v._v(" "),_("h3",{attrs:{id:"视口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#视口"}},[v._v("#")]),v._v(" 视口")]),v._v(" "),_("p",[_("code",[v._v("<meta>")]),v._v("标签中定义了一些元数据信息，通过设置"),_("code",[v._v('<meta name = "viewport">')]),v._v("，提供有关 视口初始大小 的信息，供移动设备 使用。")]),v._v(" "),_("p",[v._v("属性值为：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("属性")]),v._v(" "),_("th",[v._v("属性值")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("width")]),v._v(" "),_("td",[v._v("数值 / device-width")]),v._v(" "),_("td",[v._v("视口宽度")])]),v._v(" "),_("tr",[_("td",[v._v("height")]),v._v(" "),_("td",[v._v("数值 / device-height")]),v._v(" "),_("td",[v._v("视口高度")])]),v._v(" "),_("tr",[_("td",[v._v("initial-scale")]),v._v(" "),_("td",[v._v("0.0 ~ 10.0")]),v._v(" "),_("td",[v._v("设备宽度与视口大小之间的缩放比率")])]),v._v(" "),_("tr",[_("td",[v._v("maximum-scale")]),v._v(" "),_("td",[v._v("0.0 ~ 10.0")]),v._v(" "),_("td",[v._v("缩放最大值")])]),v._v(" "),_("tr",[_("td",[v._v("minimum-scale")]),v._v(" "),_("td",[v._v("0.0 ~ 10.0")]),v._v(" "),_("td",[v._v("缩放最小值")])]),v._v(" "),_("tr",[_("td",[v._v("user-scalable")]),v._v(" "),_("td",[v._v("布尔值")]),v._v(" "),_("td",[v._v("默认 yes，为 no 时用户不能缩放网页")])])])]),v._v(" "),_("p",[v._v("移动端分为：布局视口（Layout Viewport）、视觉视口（Visual ViewPort）和理想视口（Ideal ViewPort）。")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("布局视口：是指用视口元标签（viewport meta）来进行布局视口设置，css 布局是相对于布局视口计算")])]),v._v(" "),_("li",[_("p",[v._v("视觉视口：是指用户当前看到的区域")])]),v._v(" "),_("li",[_("p",[v._v("理想视口：是屏幕分辨率的值，")])])]),v._v(" "),_("p",[v._v("用下面的方法可以使布局视口与理想视口的宽度一致：")]),v._v(" "),_("p",[v._v("通过设置 "),_("code",[v._v('<meta name = "viewport" content = "width = device-width， initial-scale = 1.0">')]),v._v("实现")]),v._v(" "),_("h3",{attrs:{id:"像素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#像素"}},[v._v("#")]),v._v(" 像素")]),v._v(" "),_("p",[v._v("像素包含 2 种像素：物理像素和 css 像素")]),v._v(" "),_("ol",[_("li",[v._v("物理像素")])]),v._v(" "),_("p",[v._v("物理像素又称设备像素，任何设备的物理像素的数量是固定不变的，单位是 pt。")]),v._v(" "),_("p",[v._v("所谓的一倍屏、二倍屏(Retina)、三倍屏，指的是设备以多少物理像素来显示一个 CSS 像素。")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("CSS 像素")])]),v._v(" "),_("p",[v._v("CSS 像素就是我们写 CSS 时所用的像素，是一个抽像的单位，在不同的设备或者不同的环境中，css 中的 1px 所代表的设备物理像素是不同的。比如早期的 iphone3 的分辨率是 320px"),_("em",[v._v("480px，1css 像素=1 物理像；iphoen4 开始分辨率提高成了 640px")]),v._v("960px，但屏幕尺寸没变，意味着同样大小的屏幕上，像素多了一倍，此时 1css 像素 = 2 物理像素.")]),v._v(" "),_("h4",{attrs:{id:"像素其它概念："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#像素其它概念："}},[v._v("#")]),v._v(" 像素其它概念：")]),v._v(" "),_("ol",[_("li",[v._v("设备像素比简称为 dpr")])]),v._v(" "),_("p",[v._v("DPR (devicePixelRatio)：设备物理像素和设备独立像素比、"),_("code",[v._v("DPR = 物理像素 / css像素")])]),v._v(" "),_("p",[v._v("是指在理想布局宽度，使用多少个物理像素来渲染一个 css 像素")]),v._v(" "),_("p",[v._v("js 中通过 window.devicePixelRatio 获取")]),v._v(" "),_("p",[v._v("css 中通过"),_("code",[v._v("-webkit-device-pixel-ratio")]),v._v(","),_("code",[v._v("-webkit-min-device-pixel-ratio")]),v._v(","),_("code",[v._v("-webkit-max-device-pixel-ratio")]),v._v("进行媒体查询")]),v._v(" "),_("h2",{attrs:{id:"移动端兼容方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#移动端兼容方案"}},[v._v("#")]),v._v(" 移动端兼容方案")]),v._v(" "),_("p",[v._v("三种兼容性适配方案：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("百分比方案")])]),v._v(" "),_("li",[_("p",[v._v("rem 方案")])]),v._v(" "),_("li",[_("p",[v._v("vh/vw 方案")])]),v._v(" "),_("li",[_("p",[v._v("rem+vw/vh 方案")])])]),v._v(" "),_("h3",{attrs:{id:"百分比方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#百分比方案"}},[v._v("#")]),v._v(" 百分比方案")]),v._v(" "),_("p",[v._v("使用 百分比% 定义 宽度，高度 用 px 固定，根据可视区域实时尺寸进行调整，尽可能适应各种分辨率，通常使用 max-width/min-width 控制尺寸范围过大或者过小。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("属性")]),v._v(" "),_("th",[v._v("设置参考")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("height/width")]),v._v(" "),_("td",[v._v("基于子元素的直接父元素，width 相对于父元素的 width，height 相对于父元素的 height")])]),v._v(" "),_("tr",[_("td",[v._v("top/bottom 和 left/right")]),v._v(" "),_("td",[v._v("相对于直接非 static 定位的父元素的 height/width")])]),v._v(" "),_("tr",[_("td",[v._v("padding/margin")]),v._v(" "),_("td",[v._v("不论是垂直方向或者是水平方向，都相对于直接父亲元素的 width，与父元素的 height 无关。")])]),v._v(" "),_("tr",[_("td",[v._v("border-radius")]),v._v(" "),_("td",[v._v("相对于自身的宽度")])])])]),v._v(" "),_("p",[v._v("优点：原理简单，不存在兼容性问题")]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("如果屏幕尺度跨度太大，相对设计稿过大或者过小的屏幕不能正常显示，在大屏手机或横竖屏切换场景下可能会导致页面元素被拉伸变形，字体大小无法随屏幕大小发生变化。")])]),v._v(" "),_("li",[_("p",[v._v("设置盒模型的不同属性时，其百分比设置的参考元素不唯一，容易使布局问题变得复杂")])])]),v._v(" "),_("h3",{attrs:{id:"rem-方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rem-方案"}},[v._v("#")]),v._v(" rem 方案")]),v._v(" "),_("p",[v._v("rem 是相对长度单位，rem 方案中的样式设计为相对于根元素 font-size 计算值的倍数。根据 屏幕宽度 设置 html 标签的 font-size，在布局时使用 rem 单位布局，达到自适应的目的，是"),_("strong",[v._v("弹性布局")]),v._v("的一种实现方式。")]),v._v(" "),_("p",[v._v("实现过程： 首先获取文档根元素和设备 dpr，设置 rem，在 html 文档加载和解析完成后调整 body 字体大小； 在页面缩放 / 回退 / 前进的时候， 获取元素的内部宽度 (不包括垂直滚动条，边框和外边距)，重新调整 rem 大小。")]),v._v(" "),_("p",[v._v("实现方法：用 css 处理器或 npm 包将页面 css 样式中的 px 自动转换成 rem。在整个 flexible 适配方案中，文本使用 px 作为单位，使用[data-dpr]属性来区分不同 dpr 下的文本字号。由于手机浏览器对字体显示最小是 8px，因此对于小尺寸文字需要采用 px 为单位，防止通过 rem 转化后出现显示问题。手机淘宝 中的字体使用 px 为单位，腾讯新闻中的字体使用 rem 为单位。")]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ol",[_("li",[v._v("兼容性好")])]),v._v(" "),_("p",[v._v("(1) ios: 6.1 系统以上都支持")]),v._v(" "),_("p",[v._v("(2) android: 2.1 系统以上都支持")]),v._v(" "),_("p",[v._v("(3) 大部分主流浏览器都支持")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("相较于之前的静态布局和百分比方案，页面不会因为伸缩发生变形，自适应效果更佳。")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("不是纯 css 移动适配方案，需要引入 js 脚本 在头部内嵌一段 js 脚本 监听分辨率的变化来动态改变根元素的字体大小，css 样式和 js 代码有一定 耦合性，并且必须将改变 font-size 的代码放在 css 样式之前。")])]),v._v(" "),_("li",[_("p",[v._v("小数像素问题：浏览器渲染最小的单位是像素，元素根据屏幕宽度自适应，通过 rem 计算后可能会出现小数像素，浏览器会对这部分小数四舍五入，按照整数渲染。浏览器在渲染时所做的摄入处理只是应用在元素的尺寸渲染上，其真实占据的空间依旧是原始大小。也就是说如果一个元素尺寸是 0.625px，那么其渲染尺寸应该是 1px，空出的 0.375px 空间由其临近的元素填充；同样道理，如果一个元素尺寸是 0.375px，其渲染尺寸就应该是 0，但是其会占据临近元素 0.375px 的空间。会导致：缩放到低于 1px 的元素时隐时现（解决办法：指定最小转换像素，对于比较小的像素，不转换为 rem 或 vw）；两个同样宽度的元素因为各自周围的元素宽度不同，导致两元素相差 1px；宽高相同的正方形，长宽不等了；border-radius: 50% 画的圆不圆。")])]),v._v(" "),_("li",[_("p",[v._v("Android 浏览器下 line-height 垂直居中偏离的问题。常用的垂直居中方式就是使用 line-height，这种方法在 Android 设备下并不能完全居中。")])]),v._v(" "),_("li",[_("p",[v._v("cursor: pointer 元素点击背景变色的问题，对添加了 cursor:pointer 属性的元素，在移动端点击时，背景会高亮。为元素添加 tag-highlight-color:transparent 属性可以隐藏背景高亮。")])])]),v._v(" "),_("h3",{attrs:{id:"vh-vw-方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vh-vw-方案"}},[v._v("#")]),v._v(" vh/vw 方案")]),v._v(" "),_("p",[v._v("原理：视口是浏览器中用于呈现网页的区域，移动端的视口通常指的是 布局视口")]),v._v(" "),_("p",[v._v("vw : 1vw 等于 视口宽度 的 1%")]),v._v(" "),_("p",[v._v("vh : 1vh 等于 视口高度 的 "),_("strong",[v._v("1%")])]),v._v(" "),_("p",[v._v("vmin : 选取 vw 和 vh 中 最小 的那个")]),v._v(" "),_("p",[v._v("vmax : 选取 vw 和 vh 中 最大 的那个")]),v._v(" "),_("p",[v._v("使用 css 预处理器把设计稿尺寸转换为 vw 单位，包括 文本，布局高宽，间距 等，使得这些元素能够随视口大小自适应调整。")]),v._v(" "),_("p",[v._v("以 1080px 设计稿为基准，转化的计算表示为：")]),v._v(" "),_("div",{staticClass:"language-scss line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-scss"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 以1080px作为设计稿基准")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token property"}},[_("span",{pre:!0,attrs:{class:"token variable"}},[v._v("$vw_base")])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" 1080 "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("@function")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("vw")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token variable"}},[v._v("$px")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("@return")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token variable"}},[v._v("$px")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v(" 1080"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v(" 100vw"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("p",[v._v("优点：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("纯 css 移动端适配方案，不存在脚本依赖问题")])]),v._v(" "),_("li",[_("p",[v._v('相对于 rem 以根元素字体大小的倍数 定义 元素大小，逻辑清晰简单，视口单位依赖于视口的尺寸 "1vw ＝ 1/100 viewport width"，根据 视口尺寸的百分比 来定义 元素宽度')])])]),v._v(" "),_("p",[v._v("缺点：存在一些兼容性问题，Android4.4 以下不支持")]),v._v(" "),_("h3",{attrs:{id:"rem-vw-vh-方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rem-vw-vh-方案"}},[v._v("#")]),v._v(" rem+vw/vh 方案")]),v._v(" "),_("p",[v._v("原理：vw/vh 方案能够实现宽度和高度的自适应，并且逻辑清晰，由于其被支持得较晚，所以存在一定的兼容性问题。将 vw/vh 方案与 rem 方案相结合，给根元素设置随视口变化的 vw 单位，可以通过 postcss-plugin-vwtorem 将其转换。")]),v._v(" "),_("p",[v._v("对于 1080px 宽的设计稿，设置默认根字号的大小为 100px，那么设计稿中 1px 对应的是 100vw/1080 = 0.0925926vw，并且 1rem = 100px，也就可以得到 1rem = 9.256926vw")]),v._v(" "),_("p",[v._v("同时可以使用媒体查询限制根元素的最大最小值，实现对页面的最大最小宽度限制，对用户的视觉体验更好。")]),v._v(" "),_("p",[v._v("实用性：")]),v._v(" "),_("p",[v._v("rem 弹性布局方式作为移动端 web 页面适配方法，后期从 rem 过渡到 vw ，只需要通过 改变根元素大小的计算方式 不需要其他处理。vw 将会成为一种更好的适配方式，目前由于兼容性的原因得不到广泛应用。rem+vw/vh 不存在 vw/vh 的兼容性问题，可以成为由 rem 向 vw/vh 转变的一种过渡方案。")]),v._v(" "),_("h3",{attrs:{id:"基于媒体查询的响应式设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基于媒体查询的响应式设计"}},[v._v("#")]),v._v(" 基于媒体查询的响应式设计")]),v._v(" "),_("p",[v._v("响应式设计 使得一个网站同时适配 多种设备 和 多个屏幕，让网站的布局和功能随用户的使用环境（屏幕大小、输出方式、设备/浏览器能力而变化），使其视觉合理，交互方式符合习惯。如使得内容区块可伸缩与自由排布，边距适应页面尺寸，图片适应比例变化，能够自动隐藏/部分显示内容，能自动折叠导航和菜单。")]),v._v(" "),_("p",[v._v("原理：主要实现是通过"),_("strong",[v._v("媒体查询")]),v._v("，通过给不同分辨率的设备编写不同的样式实现响应式布局，用于解决不同设备不同分辨率之间兼容问题，一般是指 PC、平板、手机设备之间较大的分辨率差异。实现上不局限于具体的方案，通常结合了 "),_("strong",[v._v("流式布局 + 弹性布局")]),v._v(" 方案。比如给小屏幕手机设置@2x 图，为大屏手机设置@3x 图")]),v._v(" "),_("p",[v._v("优点：能够使网页在不同设备、不同分辨率屏幕上呈现合理布局，不仅仅是样式伸缩变换")]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("要匹配足够多的设备与屏幕，一个 web 页面需要多个设计方案，工作量比较大")])]),v._v(" "),_("li",[_("p",[v._v("通过媒体查询技术需要设置一定量的断点，到达某个断点前后的页面发生显著变化，用户体验不太友好")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);