(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{662:function(t,s,a){"use strict";a.r(s);var n=a(20),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"内存生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存生命周期"}},[t._v("#")]),t._v(" 内存生命周期")]),t._v(" "),a("p",[t._v("不管什么程序语言，内存生命周期基本是一致的：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("分配内存")])]),t._v(" "),a("li",[a("p",[t._v("使用内存（读或写）")])]),t._v(" "),a("li",[a("p",[t._v("释放内存")])])]),t._v(" "),a("h3",{attrs:{id:"内存管理系统-手动-or-自动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理系统-手动-or-自动"}},[t._v("#")]),t._v(" 内存管理系统：手动 or 自动")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("低级语言：像 C 语言这样的低级语言一般都有底层的内存管理接口，比如 malloc()和 free()。")])]),t._v(" "),a("li",[a("p",[t._v("高级语言：JavaScript 是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让 JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。")])])]),t._v(" "),a("h3",{attrs:{id:"内存引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存引用"}},[t._v("#")]),t._v(" 内存引用")]),t._v(" "),a("p",[t._v("如果一个对象可以访问另一个对象（可以是隐式的或显式的），则称该对象引用另一个对象。例如, 一个 JavaScript 引用了它的 prototype (隐式引用)和它的属性值(显式引用)。")]),t._v(" "),a("h2",{attrs:{id:"内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[t._v("#")]),t._v(" 内存泄漏")]),t._v(" "),a("p",[t._v("内存泄漏 memory leak：是指程序在申请内存后，无法释放已申请的内存空间")]),t._v(" "),a("p",[t._v("一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。")]),t._v(" "),a("p",[t._v("memory leak 会最终会导致 out of memory！")]),t._v(" "),a("p",[t._v("合理的使用 WeakMap 和 WeakSet，能帮助我们避免内存泄漏")]),t._v(" "),a("p",[t._v("常见的内存泄漏：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("意外的全局变量")])]),t._v(" "),a("li",[a("p",[t._v("dom 清空时，还存在引用")])]),t._v(" "),a("li",[a("p",[t._v("定时器中的内存泄漏")])]),t._v(" "),a("li",[a("p",[t._v("不规范地使用闭包")])])]),t._v(" "),a("h3",{attrs:{id:"_1-意外的全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-意外的全局变量"}},[t._v("#")]),t._v(" 1. 意外的全局变量")]),t._v(" "),a("p",[t._v("变量并没有声明.JS 就会默认将它变为全局变量,这样在页面关闭之前都不会被释放.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar没有被声明!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("避免：使用严格模式")]),t._v(" "),a("h3",{attrs:{id:"_2-dom-清空时-还存在引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-dom-清空时-还存在引用"}},[t._v("#")]),t._v(" 2.dom 清空时，还存在引用")]),t._v(" "),a("p",[t._v("很多时候,为了方便存取,经常会将 DOM 结点暂时存储到数据结构中.但是在不需要该 DOM 节点时,忘记解除对它的引用,则会造成内存泄露.")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"refA"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("refA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dom删除了")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("refA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"refA"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是还存在引用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去掉DOM节点的引用")]),t._v("\nrefA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("与此类似情景还有: DOM 节点绑定了事件, 但是在移除的时候没有解除事件绑定,那么仅仅移除 DOM 节点也是没用的")]),t._v(" "),a("p",[t._v("避免：dom 引用置为 null")]),t._v(" "),a("h3",{attrs:{id:"_3-被遗忘的定时器和回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-被遗忘的定时器和回调函数"}},[t._v("#")]),t._v(" 3. 被遗忘的定时器和回调函数")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" someResource "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Node'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someResource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("如果没有清除定时器,那么 someResource 就不会被释放,如果刚好它又占用了较大内存,就会引发性能问题. 但是 setTimeout ,它计时结束后它的回调里面引用的对象占用的内存是可以被回收的. 当然有些场景 setTimeout 的计时可能很长, 这样的情况下也是需要纳入考虑的.")]),t._v(" "),a("p",[t._v("避免： 在定时器完成工作的时候，手动清除定时器")]),t._v(" "),a("h3",{attrs:{id:"_4-不规范地使用闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-不规范地使用闭包"}},[t._v("#")]),t._v(" 4. 不规范地使用闭包")]),t._v(" "),a("p",[t._v("相互循环引用")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("bar 作为一个闭包,即使它内部什么都没有,foo 中的所有变量都还是隐式地被 bar 所引用。 即使 bar 内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将 a.fn = bar.")]),t._v(" "),a("p",[t._v("注意点：")]),t._v(" "),a("p",[t._v("闭包，闭包和内存泄漏没有半毛钱关系，只是由于 IE9 之前的版本垃圾收集机制的原因，导致内存无法进行回收，这是 IE 的问题，现代浏览器基本都不存在这个问题。当然闭包要是使用不当肯定是会造成内存泄漏。")]),t._v(" "),a("h3",{attrs:{id:"vue-中的内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的内存泄漏"}},[t._v("#")]),t._v(" vue 中的内存泄漏")]),t._v(" "),a("ol",[a("li",[t._v("DOM 中的 addEventLisner 函数及派生的事件监听没有解除绑定")])]),t._v(" "),a("p",[t._v("解决办法：需要在 beforeDestroy 中做对应解绑处理；")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("组件中使用了 setInterval，需要在 beforeDestroy 中做对应销毁处理")])]),t._v(" "),a("h3",{attrs:{id:"怎么避免内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么避免内存泄漏"}},[t._v("#")]),t._v(" 怎么避免内存泄漏")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收(即赋值为 null)；")])]),t._v(" "),a("li",[a("p",[t._v("避免循环引用，避免“死循环”之类的 ；")])]),t._v(" "),a("li",[a("p",[t._v("避免创建过多的对象 原则：不用了的东西要记得及时归还。")])]),t._v(" "),a("li",[a("p",[t._v("减少层级过多的引用")])])]),t._v(" "),a("h2",{attrs:{id:"内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出"}},[t._v("#")]),t._v(" 内存溢出")]),t._v(" "),a("p",[t._v("内存溢出 out of memory：是一种程序运行出现的错误， 是指程序在申请内存时，没有足够的内存空间供其使用")]),t._v(" "),a("h3",{attrs:{id:"内存溢出的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出的原因"}},[t._v("#")]),t._v(" 内存溢出的原因")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("内存中加载的数据量过于庞大，如一次从数据库取出过多数据；")])]),t._v(" "),a("li",[a("p",[t._v("集合类中有对对象的引用，使用完后未清空，使得 JVM 不能回收；")])]),t._v(" "),a("li",[a("p",[t._v("代码中存在死循环或循环产生过多重复的对象实体；")])]),t._v(" "),a("li",[a("p",[t._v("使用的第三方软件中的 BUG；")])]),t._v(" "),a("li",[a("p",[t._v("启动参数内存值设定的过小")])])]),t._v(" "),a("h3",{attrs:{id:"内存溢出的解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出的解决方案"}},[t._v("#")]),t._v(" 内存溢出的解决方案")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("修改 JVM 启动参数，直接增加内存。(-Xms，-Xmx 参数一定不要忘记加。)")])]),t._v(" "),a("li",[a("p",[t._v("检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。")])]),t._v(" "),a("li",[a("p",[t._v("检查代码中是否有死循环或递归调用")])]),t._v(" "),a("li",[a("p",[t._v("检查是否有大循环重复产生新对象实体。")])]),t._v(" "),a("li",[a("p",[t._v("检查对数据库查询中，是否有一次获得全部数据的查询(如果一次取十万条记录到内存，就可能引起内存溢出)")])])]),t._v(" "),a("h2",{attrs:{id:"js-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-垃圾回收"}},[t._v("#")]),t._v(" js 垃圾回收")]),t._v(" "),a("p",[t._v("浏览器的 Javascript 具有自动垃圾回收机制(GC:Garbage Collecation)，也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销比较大并且 GC 时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。")]),t._v(" "),a("p",[t._v("垃圾：")]),t._v(" "),a("p",[t._v("一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。")]),t._v(" "),a("p",[t._v("垃圾回收算法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("标记清除")])]),t._v(" "),a("li",[a("p",[t._v("引用计数")])])]),t._v(" "),a("h3",{attrs:{id:"标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),a("p",[t._v("流程：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("垃圾收集器找到所有的根，并“标记”（记住）它们。")])]),t._v(" "),a("li",[a("p",[t._v("然后它遍历并“标记”来自它们的所有引用。")])]),t._v(" "),a("li",[a("p",[t._v("然后它遍历标记的对象并标记 它们的 引用。所有被遍历到的对象都会被记住，以免将来再次遍历到同一个对象。")])]),t._v(" "),a("li",[a("p",[t._v("……如此操作，直到所有可达的（从根部）引用都被访问到。")])]),t._v(" "),a("li",[a("p",[t._v("没有被标记的对象都会被删除。")])])]),t._v(" "),a("h3",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("p",[t._v("如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。")]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("p",[t._v("引用计数法是最初级的垃圾收集算法，如果某对象没有其他对象指向它了，那就说明它可以被回收。但是它无法处理"),a("strong",[t._v("循环引用")]),t._v("的问题。")]),t._v(" "),a("p",[t._v("循环引用时，两个对象都至少被引用了一次，将不能自动被回收。所以导致，我们常讲的内存泄露。")]),t._v(" "),a("h3",{attrs:{id:"v8-的-gc-机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-的-gc-机制"}},[t._v("#")]),t._v(" V8 的 GC 机制")])])}),[],!1,null,null,null);s.default=r.exports}}]);