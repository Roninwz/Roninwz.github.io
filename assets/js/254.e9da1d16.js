(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{780:function(s,t,a){"use strict";a.r(t);var e=a(14),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),a("p",[s._v("正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、matchAll、replace、search 和 split 方法。")]),s._v(" "),a("h3",{attrs:{id:"正则表达式的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的组成"}},[s._v("#")]),s._v(" 正则表达式的组成")]),s._v(" "),a("p",[s._v("JS 正则表达式中，都有"),a("code",[s._v("字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。")]),s._v("这些结构")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("字面量，匹配一个具体字符，包括不用转义的和需要转义的。比如 "),a("code",[s._v("a")]),s._v(' 匹配字符"a"，又比如'),a("code",[s._v("\\n")]),s._v("匹配换行符，又比如"),a("code",[s._v("\\.")]),s._v("匹配小数点。")])]),s._v(" "),a("li",[a("p",[s._v("字符组，匹配一个字符，可以是多种可能之一，比如"),a("code",[s._v("[0-9]")]),s._v("，表示匹配一个数字。也有\\d 的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如"),a("code",[s._v("[^0-9]")]),s._v("，表示一个非数字字符，也有\\D 的简写形式。")])]),s._v(" "),a("li",[a("p",[s._v("量词，表示一个字符连续出现，比如 "),a("code",[s._v("a{1,3}")]),s._v("表示“a”字符连续出现 3 次。另外还有常见的简写形式，比如 "),a("code",[s._v("a+")]),s._v("表示“a”字符连续出现至少一次。")])]),s._v(" "),a("li",[a("p",[s._v("锚点，匹配一个位置，而不是字符。比如^匹配字符串的开头，又比如\\b 匹配单词边界，又比如"),a("code",[s._v("(?=\\d)")]),s._v("表示数字前面的位置。")])]),s._v(" "),a("li",[a("p",[s._v("分组，用括号表示一个整体，比如"),a("code",[s._v("(ab)+")]),s._v('，表示"ab"两个字符连续出现多次，也可以使用非捕获分组'),a("code",[s._v("(?:ab)+")])])]),s._v(" "),a("li",[a("p",[s._v("分支，多个子表达式多选一，比如 "),a("code",[s._v("abc|bcd")]),s._v('，表达式匹配"abc"或者"bcd"字符子串。')])]),s._v(" "),a("li",[a("p",[s._v("反向引用，比如"),a("code",[s._v("\\2")]),s._v("，表示引用第 2 个分组。")])])]),s._v(" "),a("h3",{attrs:{id:"正则表达式的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的创建"}},[s._v("#")]),s._v(" 正则表达式的创建")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("字面量创建方式 "),a("code",[s._v("var reg = /pattern/modifiers")]),s._v("，例子：")])]),s._v(" "),a("li",[a("p",[s._v("实例创建方式 "),a("code",[s._v("var reg = new RegExp(pattern,modifiers);")])]),s._v(" "),a("p",[s._v("RegExp 对象是一个预定义了属性和方法的正则表达式对象。")]),s._v(" "),a("p",[s._v("参数：")]),s._v(" "),a("p",[s._v("pattern（模式） 描述了表达式的模式")]),s._v(" "),a("p",[s._v("modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配")])])]),s._v(" "),a("h3",{attrs:{id:"正则的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则的特性"}},[s._v("#")]),s._v(" 正则的特性")]),s._v(" "),a("ol",[a("li",[s._v("贪婪性")])]),s._v(" "),a("p",[s._v("所谓的贪婪性就是正则在捕获时，每一次会尽可能多的去捕获符合条件的内容。\n如果我们想尽可能的少的去捕获符合条件的字符串的话，可以在量词元字符后加?")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("懒惰性")])]),s._v(" "),a("p",[s._v("懒惰性则是正则在成功捕获一次后不管后边的字符串有没有符合条件的都不再捕获。\n如果想捕获目标中所有符合条件的字符串的话，我们可以用标识符 g 来标明是全局捕获")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123aaa456"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只捕获一次,一次尽可能多的捕获")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["123", index: 0, input: "123aaa456"]')]),s._v("\nreg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+?")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//解决贪婪性、懒惰性")]),s._v("\nres "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["1", "2", "3", "4", "5", "6"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"正则表达式回溯法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式回溯法"}},[s._v("#")]),s._v(" 正则表达式回溯法")]),s._v(" "),a("h2",{attrs:{id:"正则字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则字符"}},[s._v("#")]),s._v(" 正则字符")]),s._v(" "),a("h3",{attrs:{id:"元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[s._v("#")]),s._v(" 元字符")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\\d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("之间的任意一个数字  \\d只占一个位置\n\\w "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 数字，字母 ，下划线 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),s._v(" _\n\\s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 空格或者空白等\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("D")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 除了\\d\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("W")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 除了\\w\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 除了\\s\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 除了\\n之外的任意一个字符\n \\ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 转义字符\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("或者")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 分组\n\\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 匹配换行符\n\\b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 匹配边界 字符串的开头和结尾 "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("空格的两边都是边界")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" 不占用字符串位数\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("限定开始位置")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" 本身不占位置\n "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("$")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("限定结束位置")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" 本身不占位置\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 任意字母 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("中的表示任意一个都可以\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 非字母 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("中"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("代表除了\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" abc三个字母中的任何一个 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("除了这三个字母中的任何一个字符\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限定符"}},[s._v("#")]),s._v(" 限定符")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("* : 0到多个")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("+ : 1到多个")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("? : 0次或1次 可有可无")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("{n} : 正好n次；")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("{n,} : n到多次")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("{n,m} : n次到m次")])])])]),s._v(" "),a("h3",{attrs:{id:"描述字符范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述字符范围"}},[s._v("#")]),s._v(" 描述字符范围")]),s._v(" "),a("p",[s._v("在正则表达式语法中，放括号表示字符范围。在方括号中可以包含多个字符，表示匹配其中任意一个字符。如果多个字符的编码顺序是连续的，可以仅指定开头和结尾字符，省略中间字符，仅使用连字符~表示。如果在方括号内添加脱字符^前缀，还可以表示范围之外的字符。例如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：查找方括号内任意一个字符。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：查找不在方括号内的字符。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：查找从 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 至 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" 范围内的数字，即查找数字。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：查找从小写 a 到小写 z 范围内的字符，即查找小写字母。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：查找从大写 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 到大写 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),s._v(" 范围内的字符，即查找大写字母。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：查找从大写 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 到小写 z 范围内的字符，即所有大小写的字母。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"边界量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#边界量词"}},[s._v("#")]),s._v(" 边界量词")]),s._v(" "),a("p",[s._v("边界就是确定匹配模式的位置，如字符串的头部或尾部，具体说明如表所示。")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("^")]),s._v(" 匹配开头，在多行检测中，会匹配一行的开头")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("$")]),s._v(" 匹配结尾，在多行检测中，会匹配一行的结尾")])])]),s._v(" "),a("p",[s._v("(1) 匹配最后一个单词")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"how are you"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\w+$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//返回数组["you"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("(2) 匹配第一个单词")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("^\\w+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//返回数组["how"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("(3) 匹配每一个单词")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\w+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//返回数组["how","are","you"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"运算符优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[s._v("#")]),s._v(" 运算符优先级")]),s._v(" "),a("p",[s._v("正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。")]),s._v(" "),a("p",[s._v("相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("\\")]),s._v(" "),a("td",[s._v("转义符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("(), (?:), (?=), []")])]),s._v(" "),a("td",[s._v("圆括号和方括号")])]),s._v(" "),a("tr",[a("td",[s._v("*, +, ?, {n}, {n,}, {n,m}")]),s._v(" "),a("td",[s._v("限定符")])]),s._v(" "),a("tr",[a("td",[s._v("^, $, \\任何元字符、任何字符")]),s._v(" "),a("td",[s._v("定位点和序列（即：位置和顺序）")])]),s._v(" "),a("tr",[a("td"),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v('字符具有高于替换运算符的优先级，使得"m')]),s._v(" "),a("td",[s._v('food"匹配"m"或"food"。若要匹配"mood"或"food"，请使用括号创建子表达式，从而产生"(m')])])])]),s._v(" "),a("h2",{attrs:{id:"正则方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则方法"}},[s._v("#")]),s._v(" 正则方法")]),s._v(" "),a("h3",{attrs:{id:"正则相关的一些方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则相关的一些方法"}},[s._v("#")]),s._v(" 正则相关的一些方法")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("reg.test(str)")]),s._v(" 用来验证字符串是否符合正则 "),a("strong",[a("em",[s._v("符合返回 true 否则返回 false")])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\w+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[s._v("reg.exec()")]),s._v(" 用来捕获符合规则的字符串，该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。")])]),s._v(" "),a("h3",{attrs:{id:"支持正则的字符串相关方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持正则的字符串相关方法"}},[s._v("#")]),s._v(" 支持正则的字符串相关方法")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("str.match(reg)")]),s._v(" 如果匹配成功，就**"),a("em",[s._v("返回匹配成功的数组")]),s._v("**，如果匹配不成功，就返回 null")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("str.replace(reg, char)")]),s._v(" 正则去匹配字符串，匹配成功的字符去替换成新的字符串，"),a("strong",[a("em",[s._v("返回替换成功的字符串")])])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a111bc222de"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Q"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "aQQQbcQQQde"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("str.search(reg)")]),s._v(" 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并**"),a("em",[s._v("返回子串的起始位置")]),s._v("**。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Visit Runoob!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("Runoob")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[s._v("str.split(reg, limit)")]),s._v(" 用于把一个字符串分割成字符串数组。返回一个字符串数组")])]),s._v(" "),a("p",[s._v("limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")]),s._v(" "),a("h2",{attrs:{id:"常用正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用正则"}},[s._v("#")]),s._v(" 常用正则")]),s._v(" "),a("h3",{attrs:{id:"手机号匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手机号匹配"}},[s._v("#")]),s._v(" 手机号匹配")]),s._v(" "),a("h3",{attrs:{id:"身份证号匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#身份证号匹配"}},[s._v("#")]),s._v(" 身份证号匹配")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("参考："),a("a",{attrs:{href:"https://www.cnblogs.com/lnlvinso/p/10467941.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("js 中正则表达式使用"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);