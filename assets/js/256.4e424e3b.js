(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{720:function(e,t,r){"use strict";r.r(t);var o=r(24),p=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"proxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[e._v("#")]),e._v(" Proxy")]),e._v(" "),r("p",[e._v("Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。")]),e._v(" "),r("blockquote",[r("p",[e._v("其实就是在对目标对象的操作之前提供了拦截，可以对外界的操作进行过滤和改写，修改某些操作的默认行为，这样我们可以不直接操作对象本身，而是通过操作对象的代理对象来间接来操作对象，达到预期的目的~")])]),e._v(" "),r("h3",{attrs:{id:"proxy-与-object-defineproperty-优劣对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxy-与-object-defineproperty-优劣对比"}},[e._v("#")]),e._v(" Proxy 与 Object.defineProperty 优劣对比")]),e._v(" "),r("p",[e._v("Proxy 可以直接监听对象而非属性；")]),e._v(" "),r("p",[e._v("Proxy 可以直接监听数组的变化；")]),e._v(" "),r("p",[e._v("Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；")]),e._v(" "),r("p",[e._v("Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；")]),e._v(" "),r("p",[e._v("Object.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。")]),e._v(" "),r("p",[e._v("Object.defineProperty 不能监听数组。是通过重写数据的那 7 个可以改变数据的方法来对数组进行监听的。")])])}),[],!1,null,null,null);t.default=p.exports}}]);