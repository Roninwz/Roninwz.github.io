(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{807:function(t,v,_){"use strict";_.r(v);var a=_(24),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"虚拟-dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom"}},[t._v("#")]),t._v(" 虚拟 DOM")]),t._v(" "),_("p",[t._v("虚拟 DOM，就是用一个 JS 对象来描述一个 DOM 节点")]),t._v(" "),_("p",[t._v("VNode 的类型：")]),t._v(" "),_("ol",[_("li",[t._v("注释节点")]),t._v(" "),_("li",[t._v("文本节点")]),t._v(" "),_("li",[t._v("元素节点")]),t._v(" "),_("li",[t._v("组件节点")]),t._v(" "),_("li",[t._v("函数式组件节点")]),t._v(" "),_("li",[t._v("克隆节点")])]),t._v(" "),_("h3",{attrs:{id:"为什么要有虚拟-dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有虚拟-dom"}},[t._v("#")]),t._v(" 为什么要有虚拟 DOM")]),t._v(" "),_("p",[t._v("操作真实的 DOM 是很消耗性能的，所以就用 JS 的计算性能来换取操作 DOM 所消耗的性能")]),t._v(" "),_("p",[t._v("当数据发生变化时，我们对比变化前后的虚拟 DOM 节点，通过 DOM-Diff 算法计算出需要更新的地方，然后去更新需要更新的视图。")]),t._v(" "),_("h3",{attrs:{id:"虚拟-dom-的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-的作用"}},[t._v("#")]),t._v(" 虚拟 DOM 的作用")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("服务于 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗")])]),t._v(" "),_("li",[_("p",[t._v("抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种 GUI")])])]),t._v(" "),_("h3",{attrs:{id:"虚拟-dom-流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-流程"}},[t._v("#")]),t._v(" 虚拟 dom 流程")]),t._v(" "),_("ol",[_("li",[t._v("用 JavaScript 模拟 DOM 树")])]),t._v(" "),_("p",[t._v("(1) 实现一个 VNode 类来描述 DOM 树")]),t._v(" "),_("p",[t._v("(2) 实现一个 createElement 方法创建虚拟 DOM")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[t._v("比较新老 DOM 树，得到比较的差异对象（diff 算法）")])]),t._v(" "),_("li",[_("p",[t._v("把差异对象应用到渲染的 DOM 树。（render 函数和 mount 函数）")])])])])}),[],!1,null,null,null);v.default=r.exports}}]);