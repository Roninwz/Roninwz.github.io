(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{471:function(v,_,t){v.exports=t.p+"assets/img/observer.32b4a39c.png"},922:function(v,_,t){"use strict";t.r(_);var a=t(20),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"观察者模式和发布订阅模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式和发布订阅模式"}},[v._v("#")]),v._v(" 观察者模式和发布订阅模式")]),v._v(" "),a("p",[v._v("观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。")]),v._v(" "),a("p",[v._v("观察者模式中观察者和被观察者，是松耦合")]),v._v(" "),a("p",[v._v("发布订阅模式中发布者和订阅者，是完全解耦的")]),v._v(" "),a("p",[a("img",{attrs:{src:t(471),alt:"image"}})]),v._v(" "),a("h2",{attrs:{id:"观察者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[v._v("#")]),v._v(" 观察者模式")]),v._v(" "),a("p",[v._v("观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯")]),v._v(" "),a("p",[a("strong",[v._v("意图")]),v._v("：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。")]),v._v(" "),a("p",[a("strong",[v._v("主要解决")]),v._v("：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。")]),v._v(" "),a("p",[a("strong",[v._v("何时使用")]),v._v("：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。")]),v._v(" "),a("p",[v._v("观察者模式里，只有两个角色 观察者 + 被观察者")]),v._v(" "),a("h3",{attrs:{id:"优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[v._v("#")]),v._v(" 优缺点")]),v._v(" "),a("p",[v._v("优点：")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("观察者和被观察者是抽象耦合的。")])]),v._v(" "),a("li",[a("p",[v._v("建立一套触发机制。")])])]),v._v(" "),a("p",[v._v("缺点：")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。")])]),v._v(" "),a("li",[a("p",[v._v("如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。")])]),v._v(" "),a("li",[a("p",[v._v("观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。")])])]),v._v(" "),a("h3",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。")])]),v._v(" "),a("li",[a("p",[v._v("一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。")])]),v._v(" "),a("li",[a("p",[v._v("一个对象必须通知其他对象，而并不知道这些对象是谁。")])]),v._v(" "),a("li",[a("p",[v._v("需要在系统中创建一个触发链，A 对象的行为将影响 B 对象，B 对象的行为将影响 C 对象……，可以使用观察者模式创建一种链式触发机制。")])])]),v._v(" "),a("h2",{attrs:{id:"发布订阅模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式"}},[v._v("#")]),v._v(" 发布订阅模式")]),v._v(" "),a("p",[v._v("24 种基本的设计模式中并没有发布订阅模式，它只是观察者模式的一个别称。")]),v._v(" "),a("p",[v._v("但是经过时间的沉淀，已经独立于观察者模式，成为另外一种不同的设计模式。")]),v._v(" "),a("p",[v._v("在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。")])])}),[],!1,null,null,null);_.default=s.exports}}]);