(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{1007:function(t,s,a){"use strict";a.r(s);var n=a(24),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),n("h3",{attrs:{id:"组件库按需加载原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件库按需加载原理"}},[t._v("#")]),t._v(" 组件库按需加载原理")]),t._v(" "),n("blockquote",[n("p",[t._v("组件库按需加载主要目的就是为了减少项目构建打包产物的大小，提高项目线上首屏渲染速度，减少白屏时间，减少流量消耗。")])]),t._v(" "),n("p",[t._v("目前按需加载有两种方式实现。")]),t._v(" "),n("ol",[n("li",[t._v("手动加载")])]),t._v(" "),n("p",[t._v("以 vant 为例子：")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Button "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vant/lib/button"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vant/lib/button/style"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("自动加载：")])]),t._v(" "),n("p",[t._v("（1） 使用 babel-plugin-import 插件来自动按需引入")]),t._v(" "),n("p",[t._v("babel-plugin-import 是 ant-design 团队出的一个 babel 插件，主要用于模块的按需加载。其原理就是将直接引入的方式通过 babel 转化成按需引入的方式。如果 css 也需要按需加载，也会注入 css 引用代码。")]),t._v(" "),n("p",[t._v("babel-plugin-import 插件的核心原理如图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(481),alt:"image"}})]),t._v(" "),n("p",[t._v("参数主要包括：")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libraryName"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vant"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 组件库名称，对应 import 语法中的包名")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libraryDirectory"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lib"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译之后各个组件单元所在文件夹名称")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"style"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否引入组件对应样式文件，也可以传入 less 来引入 less 文件")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"styleLibraryDirectory"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译之后引入的组件样式文件所在文件夹名称")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"camel2DashComponentName"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否将驼峰命名的导入变量转换为对应的横线连接命名的文件名")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"customName"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("vant/lib/")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义编译之后引入的组件名")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"customStyleName"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("vant/lib/css/")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义编译之后引入样式文件的名称")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("（2） 提供 es module 版本，开启 tree shaking")]),t._v(" "),n("p",[t._v("这个方法只针对于 js， 对于样式的按需加载仍需要手动引入。 当然 babel-plugin-import 和 tree shaking 也可以并存使用。但大部分情况并存使用与单独使用体积差距不是很大。")]),t._v(" "),n("blockquote",[n("p",[t._v("Webpack 怎么知道有没有 ES module 或 CommonJS module，其实通过组件库 package.json 中相关字段判断出来的：")])]),t._v(" "),n("p",[t._v("CommonJS module：package.json 的 "),n("code",[t._v('main:"lib/index.js"')])]),t._v(" "),n("p",[t._v("ES module：package.json 的 "),n("code",[t._v('module:"es/index.js"')])]),t._v(" "),n("h3",{attrs:{id:"组件封装原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件封装原则"}},[t._v("#")]),t._v(" 组件封装原则")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("单一职责")])]),t._v(" "),n("li",[n("p",[t._v("可维护性 可扩展性")])]),t._v(" "),n("li",[n("p",[t._v("高性能，低耦合")])]),t._v(" "),n("li",[n("p",[t._v("明确接受参数：必选，非必选，参数尽量设置以_开头，避免变量重复")])])]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("参考："),n("a",{attrs:{href:"https://juejin.cn/post/6968505746757533710",target:"_blank",rel:"noopener noreferrer"}},[t._v("组件库按需加载原理分析"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports},481:function(t,s,a){t.exports=a.p+"assets/img/babel-component.702eeeac.png"}}]);