(window.webpackJsonp=window.webpackJsonp||[]).push([[398],{870:function(a,e,l){"use strict";l.r(e);var r=l(13),_=Object(r.a)({},(function(){var a=this,e=a.$createElement,l=a._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[l("h1",{attrs:{id:"webpack"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[a._v("#")]),a._v(" webpack")]),a._v(" "),l("h3",{attrs:{id:"_1-webpack-如何实现动态加载"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack-如何实现动态加载"}},[a._v("#")]),a._v(" 1.webpack 如何实现动态加载")]),a._v(" "),l("ol",[l("li",[l("p",[a._v("import() 语法 来实现动态导入。")])]),a._v(" "),l("li",[l("p",[a._v("使用 webpack 特定的 require.ensure")])])]),a._v(" "),l("h3",{attrs:{id:"_2-loader-和-plugin-的作用是什么-loader-和-plugin-的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-loader-和-plugin-的作用是什么-loader-和-plugin-的区别"}},[a._v("#")]),a._v(" 2.loader 和 plugin 的作用是什么，loader 和 plugin 的区别")]),a._v(" "),l("ol",[l("li",[a._v("作用不同")])]),a._v(" "),l("p",[a._v("loader，它是一个转换器，用于对模块源码的转换，")]),a._v(" "),l("p",[a._v("plugin 是一个扩展器，为了扩展 webpack 的功能，目的在于解决 loader 无法实现的其他事，从打包优化和压缩，到重新定义环境变量，功能强大到可以用来处理各种各样的任务")]),a._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[a._v("运行时机不同")])]),a._v(" "),l("p",[a._v("loader 运行在打包文件之前，plugins 在整个编译周期都起作用")]),a._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[a._v("loader 遵循单一职责，一个 loader 只做一件事情，plugins 是基于事件机制工作，会监听 webpack 打包过程中的某些节点，作用于 webpack 打包的整个过程")])]),a._v(" "),l("h3",{attrs:{id:"_3-webpack-用过哪些-loader-和-plugin"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-webpack-用过哪些-loader-和-plugin"}},[a._v("#")]),a._v(" 3.Webpack 用过哪些 loader 和 plugin?")]),a._v(" "),l("p",[a._v("常用 loader:")]),a._v(" "),l("ol",[l("li",[l("p",[a._v("样式：style-loader(用于将 css 编译完成的样式，挂载到页面 style 标签上)、css-loader（加载 CSS）、less-loader、sass-loader 等")])]),a._v(" "),l("li",[l("p",[a._v("文件：file-loader 、url-loader、raw-loader 等")])]),a._v(" "),l("li",[l("p",[a._v("编译：babel-loader、coffee-loader 、ts-loader（将 TypeScript 转为 JavaScript）等")])]),a._v(" "),l("li",[l("p",[a._v("校验测试：eslint-loader、mocha-loader、jshint-loader 等")])]),a._v(" "),l("li",[l("p",[a._v("数据：csv-loader xml-loader（打包加载解析 csv 和 xml 文件数据）")])])]),a._v(" "),l("p",[a._v("常用 plugin:")]),a._v(" "),l("ol",[l("li",[l("p",[a._v("html-webpack-plugin：生成 HTML 文件")])]),a._v(" "),l("li",[l("p",[a._v("copy-webpack-plugin 拷贝文件")])]),a._v(" "),l("li",[l("p",[a._v("compression-webpack-plugin 生产环境时可选择让代码压缩 gzip.")])]),a._v(" "),l("li",[l("p",[a._v("terser-webpack-plugin 该插件使用 terser 来压缩 JavaScript。")])]),a._v(" "),l("li",[l("p",[a._v("mini-css-extract-plugin 本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，")])]),a._v(" "),l("li",[l("p",[a._v("clean-webpack-plugin 清理上一次项目生成的 bundle 文件")])]),a._v(" "),l("li",[l("p",[a._v("commons-chunk-plugin 提取公共代码")])])]),a._v(" "),l("h3",{attrs:{id:"_5-webpack-的打包过程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-webpack-的打包过程"}},[a._v("#")]),a._v(" 5.webpack 的打包过程")]),a._v(" "),l("ul",[l("li",[l("p",[a._v("初始化参数 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数")])]),a._v(" "),l("li",[l("p",[a._v("开始编译 用上一步得到的参数初始 Compiler 对象，加载所有配置的插件，通 过执行对象的 run 方法开始执行编译")])]),a._v(" "),l("li",[l("p",[a._v("确定入口 根据配置中的 Entry 找出所有入口文件")])]),a._v(" "),l("li",[l("p",[a._v("编译模块 从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理")])]),a._v(" "),l("li",[l("p",[a._v("完成模块编译 在经过第 4 步使用 Loader 翻译完所有模块后， 得到了每个模块被编译后的最终内容及它们之间的依赖关系")])]),a._v(" "),l("li",[l("p",[a._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk,再将每个 Chunk 转换成一个单独的文件加入输出列表中，这是可以修改输出内容的最后机会")])]),a._v(" "),l("li",[l("p",[a._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，将文件的内容写入文件系统中。")])])]),a._v(" "),l("h3",{attrs:{id:"_6-webpack-拆包-代码分离"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-webpack-拆包-代码分离"}},[a._v("#")]),a._v(" 6.webpack 拆包(代码分离)")]),a._v(" "),l("ul",[l("li",[l("p",[a._v("入口起点：使用 "),l("a",{attrs:{href:"https://webpack.docschina.org/configuration/entry-context",target:"_blank",rel:"noopener noreferrer"}},[l("code",[a._v("entry")]),l("OutboundLink")],1),a._v(" 配置手动地分离代码。")])]),a._v(" "),l("li",[l("p",[a._v("防止重复：使用 "),l("a",{attrs:{href:"https://webpack.docschina.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"}},[l("code",[a._v("SplitChunksPlugin")]),l("OutboundLink")],1),a._v(" 去重和分离 chunk。")])]),a._v(" "),l("li",[l("p",[a._v("动态导入：通过模块中的内联函数调用来分离代码。")])])]),a._v(" "),l("p",[a._v("使用 webpack 拆包功能，从 bundle.js 中拆分出多个 chunk.js，实现 js 的按需加载，可以提高首屏加载速度")]),a._v(" "),l("p",[a._v("webpack4 取消了 CommonsChunkPlugin，使用 splitChunks 进行拆包")]),a._v(" "),l("h3",{attrs:{id:"_7-自己编写-webpack-插件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-自己编写-webpack-插件"}},[a._v("#")]),a._v(" 7. 自己编写 webpack 插件")]),a._v(" "),l("ul",[l("li",[a._v("一个 JavaScript 命名函数。")]),a._v(" "),l("li",[a._v("在插件函数的 prototype 上定义一个 apply 方法。，方法传入 compiler 参数(compiler 对象代表了完整的 webpack 环境配置) 。")]),a._v(" "),l("li",[a._v("指定一个绑定到 webpack 自身的事件钩子。")]),a._v(" "),l("li",[a._v("处理 webpack 内部实例的特定数据。")]),a._v(" "),l("li",[a._v("功能完成后调用 webpack 提供的回调。")])]),a._v(" "),l("h3",{attrs:{id:"webpack5-和-webpack4-区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack5-和-webpack4-区别"}},[a._v("#")]),a._v(" webpack5 和 webpack4 区别")]),a._v(" "),l("ol",[l("li",[a._v("webpack5 内部内置了 cache 缓存机制")])]),a._v(" "),l("h3",{attrs:{id:"_100-webpack4-区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_100-webpack4-区别"}},[a._v("#")]),a._v(" 100.webpack4 区别")]),a._v(" "),l("ul",[l("li",[a._v("1、取消了 UglifyjsWebpackPlugin，使用 minimize 进行压缩，")]),a._v(" "),l("li",[a._v("2、取消了 CommonsChunkPlugin，使用 splitChunks 进行分包。")])])])}),[],!1,null,null,null);e.default=_.exports}}]);