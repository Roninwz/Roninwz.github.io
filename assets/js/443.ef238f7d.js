(window.webpackJsonp=window.webpackJsonp||[]).push([[443],{920:function(e,o,s){"use strict";s.r(o);var t=s(24),a=Object(t.a)({},(function(){var e=this,o=e.$createElement,s=e._self._c||o;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"前端存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端存储"}},[e._v("#")]),e._v(" 前端存储")]),e._v(" "),s("h3",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" cookie")]),e._v(" "),s("p",[e._v("Cookie 定义：")]),e._v(" "),s("p",[e._v("中文名称为'小型文本文件'或'小甜饼'，指某些网站为了辨识用户身份而存储在用户本地终端上的数据（通常 name 和 value 经过编码）。")]),e._v(" "),s("p",[e._v("Cookie 组成："),s("code",[e._v("Cookie: [name][value][domain][path][expires][httponly][secure]")])]),e._v(" "),s("p",[e._v("通常通过 JS 设置 Cookie 为以下形式。当然，最好的方式是通过一个函数来设置。")]),e._v(" "),s("p",[s("code",[e._v("document.cookie = 'name=kk; domain=localhost; path=/; expires= Mon Nov 06 2017 01:32:07 GMT+0800 (CST)'")])]),e._v(" "),s("ol",[s("li",[s("p",[e._v("name, value: 是 Cookie 的名称和值。Cookie 的 name 和 value 必须经过 url 编码。在 JS 中可以通过 window.encodeURIComponent 方法来对 name 和 value 进行编码。同时，在写 cookie 的时候要注意，cookie 的名称是不区分大小写的。所以 myCookie 和 MyCookie 被认为是同一个 cookie。但是在实际开发过程中，最好区分大小写。")])]),e._v(" "),s("li",[s("p",[e._v("domain: Cookie 对于哪个域是有效的。所以向该域发出的请求都会包含 Cookie 信息。设置 Cookie 时，如果不指定 Cookie 的值，默认就是本域名。如我在本地通过 Node.js 起服务器时，Cookie 的 domain 为 domain=localhost。")])])]),e._v(" "),s("p",[e._v("子域可以获取当前域（父域）的 cookie，但是当前域（父域）不能获取子域的 cookie。比如说，当前域为 a.com，在 a.com 设置了 cookie。那么其子域 b.a.com 可以获取 a.com 的 cookie。但是如果在 b.a.com 设置的 cookie，在 a.com 域名下不能获取到 b.a.com 下的 cookie。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("path: 对于指定域中的那个路径，应该向服务器发送 cookie。默认情况下，如果不设置 Cookie 的 path 时，默认路径为/。比如说，在 a.com/profile 路径下设置的 cookie，那么在访问此路径的时候才会发送 cookie，在访问 a.com 时不会发送 cookie。")])]),e._v(" "),s("blockquote",[s("p",[e._v("如果需要跨路径获取 Cookie 值，可以使用隐藏的 iframe 实现，但是必须是同源的。")])]),e._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[e._v("expires：表示 Cookie 何时被删除的时间戳。这个时间戳是 GMT 格式的日期（Wdy, DD-Mon-YYYY HH:MM:SS GMT）。如果设置成以前的时间，则 Cookie 会被立即删除。如果设置的是将来的某个时间，那么即使关闭浏览器，cookie 仍然保持在用户的电脑上。expires 字段的设置与否，会把 Cookie 分为两种：本地（持久化）Cookie 和内存（非持久化）Cookie。在介绍分类的时候再细说。")])]),e._v(" "),s("li",[s("p",[e._v("httpOnly: 顾名思义，httpOnly 是指在 HTTP 层面上传输的 Cookie。当服务端对 Cookie 消息设置了 httpOnly 标志之后，客户端脚本就无法通过 document.cookie 的方式读写 cookie。能够读取意味着可以获取 Cookie，能够写入 Cookie 意味着可以篡改 Cookie。因此，对重要的 Cookie 消息设置 httpOnly 能够有效防御 XSS 攻击获取 Cookie。")])]),e._v(" "),s("li",[s("p",[e._v("secure: secure 表明设置了 secure 字段的 Cookie 只能在 HTTPS 上进行安全数据传输。如果请求是 HTTP 的，就不会带上这个 Cookie。这里要留心一点的是，服务端设置 cookie 下的 secure 字段，它并不是以名称-值对的形式的。而是单单一个 secure 单词。例如，Cookie 信息只能发送给https://keith.com，而http://keith.com的请求则不能发送Cookie。")])])]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("如以下响应头，其他字段是名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("值对的形式，而secure是一个单词。\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("OK")]),e._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Type"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" text"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("html\nSet"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Cookie"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("keith"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" domain"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" path"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" exipres"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Mon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("08")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("June"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("07")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("GMT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" secure\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("但是，有一个很特别的是设置了 secure 字段的 Cookie 可以被读写。因此，一般情况下，如果只允许 HTTPS 获取数据，服务端可以一起配置 secure + httpOnly 字段，这样就能够保证 HTTPS 传输，并且避免了 Cookie 被读写的风险。")]),e._v(" "),s("ul",[s("li",[e._v("Cookie 大小：")])]),e._v(" "),s("p",[e._v("大多数浏览器 Cookie 默认大小为 4kb。超过的部分会被截断掉。")]),e._v(" "),s("ul",[s("li",[e._v("Cookie 分类：")])]),e._v(" "),s("p",[e._v("根据 Cookie 中的 expires 字段，可以将 Cookie 分为本地（持久化）Cookie 和内存（非持久化）Cookie。")]),e._v(" "),s("p",[e._v("当 expires 没有设置时，实际上就相当于一个内存 Cookie。浏览器关闭之后就消失了。同时，在当前浏览器下，打开多个页面仍然可以访问到 Cookie 消息。也就是说，如果浏览器不关掉的情况下都会发送 Cookie。")]),e._v(" "),s("p",[e._v("当 expires 设置一个未来的时间，那么就是一个本地 Cookie。此时会将 Cookie 存入到操作系统本地，待过期时间到了才会消失。")]),e._v(" "),s("p",[e._v("因此根据 expires 字段，可以利用 Cookie 做用户登录认证、购物车信息存储等功能。")]),e._v(" "),s("ul",[s("li",[e._v("Cookie 用途：")])]),e._v(" "),s("p",[e._v("当登录一个网站的时候。")]),e._v(" "),s("ul",[s("li",[e._v("客户端会将登录的账号和密码发送到服务器。")]),e._v(" "),s("li",[e._v("服务器对账号和密码进行加密算法之后生成 session 文件，然后会在响应时将 set-cookie 带在响应头。")]),e._v(" "),s("li",[e._v("客户端接着会将 cookie 保存在内存中。")]),e._v(" "),s("li",[e._v("客户端下次请求的时候，会将 cookie 作为请求头发往服务器。")]),e._v(" "),s("li",[e._v("服务器将对客户端传过来的 cookie 与 session 文件进行校验，如果校验通过，则可以直接登录。")])]),e._v(" "),s("p",[e._v("在购物场景中。")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("客户端会将用户已经选购的商品 1 发往服务器。")])]),e._v(" "),s("li",[s("p",[e._v("服务器会生成一份 session 文件，在响应时带上 set-cookie 发往客户端。")])]),e._v(" "),s("li",[s("p",[e._v("客户端会保存服务端传来的 cookie.")])]),e._v(" "),s("li",[s("p",[e._v("用户再次选择商品 2，进行以上同样的操作。")])]),e._v(" "),s("li",[s("p",[e._v("此时用户需要结账，客户端会将 cookie 发往服务器")])]),e._v(" "),s("li",[s("p",[e._v("进入结账页面时就会出现两个商品。")])]),e._v(" "),s("li",[s("p",[e._v("Cookie 缺点：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Cookie 的大小限制在 4kb 左右。对于复杂的存储来说是不够的")])]),e._v(" "),s("li",[s("p",[e._v("Cookie 会被附加在每个 HTTP 请求中，所以会增加 HTTP 请求大小")])]),e._v(" "),s("li",[s("p",[e._v("由于 Cookie 都是在 HTTP 请求中明文传递的，会有安全性问题（除非使用 HTTPS）")])])])])]),e._v(" "),s("h3",{attrs:{id:"session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[e._v("#")]),e._v(" session")]),e._v(" "),s("h3",{attrs:{id:"localstorage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[e._v("#")]),e._v(" localstorage")]),e._v(" "),s("blockquote",[s("p",[e._v("HTML5 新方法，不过 IE8 及以上浏览器都兼容。")])]),e._v(" "),s("ul",[s("li",[e._v("生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。")]),e._v(" "),s("li",[e._v("存储的信息在同一域中是共享的。")]),e._v(" "),s("li",[e._v("当本页操作（新增、修改、删除）了 localStorage 的时候，本页面不会触发 storage 事件,但是别的页面会触发 storage 事件。")]),e._v(" "),s("li",[e._v("大小：据说是 5M（跟浏览器厂商有关系）")]),e._v(" "),s("li",[e._v("在非 IE 下的浏览中可以本地打开。IE 浏览器要在服务器中打开。")]),e._v(" "),s("li",[e._v("localStorage 本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡")]),e._v(" "),s("li",[e._v("localStorage 受同源策略的限制")])]),e._v(" "),s("blockquote",[s("p",[e._v("操作")])]),e._v(" "),s("ul",[s("li",[e._v("设置： "),s("code",[e._v("localStorage.setItem('username','cfangxu');")])]),e._v(" "),s("li",[e._v("获取："),s("code",[e._v("localStorage.getItem('username')")])]),e._v(" "),s("li",[e._v("删除："),s("code",[e._v("localStorage.removeItem('username')")])]),e._v(" "),s("li",[e._v("情况："),s("code",[e._v("localStorage.clear()")])])]),e._v(" "),s("h3",{attrs:{id:"sessionstorage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[e._v("#")]),e._v(" sessionStorage")]),e._v(" "),s("blockquote",[s("p",[e._v("其实跟 localStorage 差不多，也是本地存储，会话本地存储")])]),e._v(" "),s("blockquote",[s("p",[e._v("用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁，"),s("br"),e._v("\nsessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。关闭窗口后，sessionStorage 即被销毁，或者在新窗口打开同源的另一个页面，sessionStorage 也是没有的。")])]),e._v(" "),s("p",[e._v("sessionStorage 在同一网站多个标签页内共享数据吗？这取决于标签页如何打开")]),e._v(" "),s("p",[e._v("通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。")]),e._v(" "),s("h3",{attrs:{id:"web-sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-sql"}},[e._v("#")]),e._v(" web sql")]),e._v(" "),s("h3",{attrs:{id:"indexeddb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb"}},[e._v("#")]),e._v(" indexedDB")]),e._v(" "),s("h3",{attrs:{id:"userdata-ie-浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#userdata-ie-浏览器"}},[e._v("#")]),e._v(" UserData(IE 浏览器)")]),e._v(" "),s("h2",{attrs:{id:"前端存储问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端存储问题"}},[e._v("#")]),e._v(" 前端存储问题")]),e._v(" "),s("h3",{attrs:{id:"_1-cookie-和-session-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-cookie-和-session-区别"}},[e._v("#")]),e._v(" 1.cookie 和 session 区别")]),e._v(" "),s("ol",[s("li",[e._v("存储位置")])]),e._v(" "),s("p",[e._v("cookie 数据保存在客户端，session 数据保存在服务器端。")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("安全性")])]),e._v(" "),s("p",[e._v("cookie 对客户端是可见的，别有用心的人可以分析存放在本地的 cookie 并进行 cookie 欺骗，所以它是不安全的。")]),e._v(" "),s("p",[e._v("session 存储在服务器上，对客户端是透明的，不存在敏感信息泄漏的风险。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("生命周期")])]),e._v(" "),s("p",[e._v("cookie 的生命周期是累计时间，即如果我们 cookie 设置 setMaxAge(30)，则 30 秒后失效")]),e._v(" "),s("p",[e._v("session 生命周期是间隔时间，如果设置 session 20min,只在 20min 内没有访问 session，则 session 失效")]),e._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[e._v("网络传输量")])]),e._v(" "),s("p",[e._v("单个 cookie 保存的数据<=4K，session 没有上限")])])}),[],!1,null,null,null);o.default=a.exports}}]);