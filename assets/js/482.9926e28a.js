(window.webpackJsonp=window.webpackJsonp||[]).push([[482],{969:function(t,r,e){"use strict";e.r(r);var d=e(24),s=Object(d.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"抓包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抓包"}},[t._v("#")]),t._v(" 抓包")]),t._v(" "),e("h3",{attrs:{id:"fiddler-工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiddler-工作原理"}},[t._v("#")]),t._v(" Fiddler 工作原理")]),t._v(" "),e("p",[e("strong",[e("em",[t._v("Fiddler 工作于七层中的应用层，能够捕获通过的 HTTP(S)请求")])])]),t._v(" "),e("p",[t._v("Fiddler 和 wireshark 工作原理不一样。fiddler 的实现原理是以代理服务器的方式工作，代理就是在客户端和服务器之间设置一道关卡，客户端先将请求数据发送出去后，代理服务器会将数据包进行拦截，代理服务器再冒充客户端发送数据到服务器；同理，服务器将响应数据返回，代理服务器也会将数据拦截，再返回给客户端。")]),t._v(" "),e("p",[t._v("Fiddler 是一个 http 协议调试代理工具，即只是针对 HTTP 协议的（工作在 OSI 参考模型的应用层），而 wireshark 是针对几乎所有协议的。")]),t._v(" "),e("p",[t._v("浏览器与服务器之间通过建立 TCP 连接以 HTTP 协议进行通信，浏览器默认通过自己发送 HTTP 请求到服务器。 而 Fiddler 是 c#开发（微软出品，主要作者 Eric Lawrence）的 http 代理服务器，fiddler 工作于七层中的应用层，能够捕获到通过的 http(s)请求。（浏览器 < -> Fiddler < -> 服务器）")])])}),[],!1,null,null,null);r.default=s.exports}}]);