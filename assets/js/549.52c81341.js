(window.webpackJsonp=window.webpackJsonp||[]).push([[549],{1109:function(e,o,t){"use strict";t.r(o);var i=t(14),s=Object(i.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"token-登录认证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token-登录认证"}},[e._v("#")]),e._v(" Token 登录认证")]),e._v(" "),t("p",[e._v("关键技术点：")]),e._v(" "),t("p",[e._v("token 管理：生成、校验、解析、删除")]),e._v(" "),t("p",[e._v("token：这里使用 userId_UUID 的形式")]),e._v(" "),t("p",[e._v("有效期：使用 Redis key 有效期设置（每次操作完了都会更新延长有效时间）")]),e._v(" "),t("p",[e._v("销毁 token：删除 Redis 中 key 为 userId 的内容")]),e._v(" "),t("p",[e._v("token 存储：客户端（Cookie）、服务端（Redis）")]),e._v(" "),t("p",[e._v("Cookie 的存取操作（js-cookie 插件）")]),e._v(" "),t("p",[e._v("Redis 存取（StringRedisTemplate）")]),e._v(" "),t("h3",{attrs:{id:"token-登录认证设计流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token-登录认证设计流程"}},[e._v("#")]),e._v(" token 登录认证设计流程")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("用户发出登录请求，带着用户名和密码到服务器经行验证，服务器验证成功就在后台生成一个 token 返回给客户端")])]),e._v(" "),t("li",[t("p",[e._v("客户端将 token 存储到 cookie 中，服务端将 token 存储到 redis 中，可以设置存储 token 的有效期。")])]),e._v(" "),t("li",[t("p",[e._v("后续客户端的每次请求资源都必须携带 token，这里放在请求头中，服务端接收到请求首先校验是否携带 token，以及 token 是否和 redis 中的匹配，若不存在或不匹配直接拦截返回错误信息（如未认证）。")])])]),e._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("支持跨域访问，将 token 置于请求头中，而 cookie 是不支持跨域访问的；")])]),e._v(" "),t("li",[t("p",[e._v("无状态化，服务端无需存储 token，只需要验证 token 信息是否正确即可，而 session 需要在服务端存储，一般是通过 cookie 中的 sessionID 在服务端查找对应的 session；")])]),e._v(" "),t("li",[t("p",[e._v("无需绑定到一个特殊的身份验证方案（传统的用户名密码登陆），只需要生成的 token 是符合我们预期设定的即可；")])]),e._v(" "),t("li",[t("p",[e._v("更适用于移动端（Android，iOS，小程序等等），像这种原生平台不支持 cookie，比如说微信小程序，每一次请求都是一次会话，当然我们可以每次去手动为他添加 cookie")])]),e._v(" "),t("li",[t("p",[e._v("避免 CSRF 跨站伪造攻击，还是因为不依赖 cookie；")])])]),e._v(" "),t("h3",{attrs:{id:"和-cookie-登录认证区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-cookie-登录认证区别"}},[e._v("#")]),e._v(" 和 cookie 登录认证区别")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Token 完全由应用管理，所以它可以避开同源策略")])]),e._v(" "),t("li",[t("p",[e._v("Token 可以避免 CSRF 攻击")])]),e._v(" "),t("li",[t("p",[e._v("Token 可以是无状态的，可以在多个服务间共享")])])])])}),[],!1,null,null,null);o.default=s.exports}}]);