(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{507:function(t,a,v){"use strict";v.r(a);var _=v(24),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"贪心算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),v("p",[t._v("所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，它所做出的仅仅是在某种意义上的局部最优解。")]),t._v(" "),v("p",[t._v("贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性（即某个状态以后的过程不会影响以前的状态，只与当前状态有关。）\n所以，对所采用的贪心策略一定要仔细分析其是否满足无后效性。")]),t._v(" "),v("p",[t._v("一般是一维问题")]),t._v(" "),v("h3",{attrs:{id:"贪心算法流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法流程"}},[t._v("#")]),t._v(" 贪心算法流程")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("建立数学模型来描述问题")])]),t._v(" "),v("li",[v("p",[t._v("把求解的问题分成若干个子问题")])]),t._v(" "),v("li",[v("p",[t._v("对每个子问题求解，得到子问题的局部最优解")])]),t._v(" "),v("li",[v("p",[t._v("把子问题的解局部最优解合成原来问题的一个解")])])]),t._v(" "),v("h3",{attrs:{id:"贪心算法存在问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法存在问题"}},[t._v("#")]),t._v(" 贪心算法存在问题")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("不能保证求得的最后解是最佳的")])]),t._v(" "),v("li",[v("p",[t._v("不能用来求最大值或最小值的问题")])]),t._v(" "),v("li",[v("p",[t._v("只能求满足某些约束条件的可行解的范围")])])]),t._v(" "),v("h3",{attrs:{id:"贪心算法应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法应用"}},[t._v("#")]),t._v(" 贪心算法应用")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("找零钱问题")])]),t._v(" "),v("li",[v("p",[t._v("买卖股票问题")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);