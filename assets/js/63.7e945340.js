(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{505:function(t,s,a){"use strict";a.r(s);var n=a(20),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),a("h3",{attrs:{id:"单向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向链表"}},[t._v("#")]),t._v(" 单向链表")]),t._v(" "),a("blockquote",[a("p",[t._v("只能从头遍历到尾或者从尾遍历到头。"),a("br"),t._v("\n节点的相连是单向的，原理就是上一个节点中有下一个节点的引用。"),a("br"),t._v("\n可以轻松的到达下一个节点，但是返回上一个节点比较难。")])]),t._v(" "),a("h3",{attrs:{id:"双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),a("blockquote",[a("p",[t._v("既可以从头遍历到尾也可以从尾遍历到头。"),a("br"),t._v("\n节点相连的过程是双向的，原理为本节点有下一个节点的引用，也有上一个节点的引用。")])]),t._v(" "),a("ul",[a("li",[t._v("双链表的缺点：")])]),t._v(" "),a("blockquote",[a("p",[t._v("每次添加或者删除节点时，要操作 4 个引用，比较麻烦。"),a("br"),t._v("\n相对于单向链表，所占内存空间大一点")])]),t._v(" "),a("ul",[a("li",[t._v("双链表的结构：")])]),t._v(" "),a("blockquote",[a("p",[t._v("双向链表不仅有 head 节点存放首节点的引用，还有 tail 存放尾结点的引用。"),a("br"),t._v("\n每个节点由三个部分组成：data：存放数据，next：存放下一个节点的引用，previous：存放上一个节点的引用。"),a("br"),t._v("\n双向链表首节点的 previous 指向 null，尾结点的 next 指向 null。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("双向链表常用方法")]),t._v(" "),a("ul",[a("li",[t._v("append(data) 向尾部添加一个节点")]),t._v(" "),a("li",[t._v("insert(position, data) 指定位置插入数据")]),t._v(" "),a("li",[t._v("getData(position) 获取指定位置的链表节点")]),t._v(" "),a("li",[t._v("indexOf(data) 查找数据对应的")]),t._v(" "),a("li",[t._v("indexremoveAt(position) 删除指定位置的节点")]),t._v(" "),a("li",[t._v("update(position, data) 修改指定位置的节点")]),t._v(" "),a("li",[t._v("remove(data) 删除指定 data 所在的节点（继承单向链表）")]),t._v(" "),a("li",[t._v("isEmpty() 判断链表是否为空")]),t._v(" "),a("li",[t._v("size() 获取链表的长度")]),t._v(" "),a("li",[t._v("forwardToString() 链表数据从前往后以字符串形式返回")]),t._v(" "),a("li",[t._v("backwardString() 链表数据从后往前以字符串形式返回")])])])]),t._v(" "),a("h3",{attrs:{id:"循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[t._v("#")]),t._v(" 循环链表")]),t._v(" "),a("blockquote",[a("p",[t._v("循环链表可以像链表一样只有单向引用，也可以像双向链表一样有双向引用。"),a("br"),t._v("\n循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（tail.next）不是引用 null，而是指向第一个元素（head）"),a("br"),t._v("\n双向循环链表有指向 head 元素的 tail.next，和指向 tail 元素的 head.prev")])]),t._v(" "),a("blockquote",[a("p",[t._v("参考"),a("a",{attrs:{href:"https://www.cnblogs.com/xiaohuochai/p/8175716.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/xiaohuochai/p/8175716.html"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"链表算法题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表算法题"}},[t._v("#")]),t._v(" 链表算法题")]),t._v(" "),a("h3",{attrs:{id:"_1-反转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-反转链表"}},[t._v("#")]),t._v(" 1.反转链表")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 反转箭头指向\n * 1->2->3->null\n * null<-1<-2<-3\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reverseList")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点的前一个节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一次循环是把当前的节点的next指向prev 周而复始")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 千万不要想着 一次循环是两个节点位置的互换")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照这个去理解null<-1<-2<-3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nextTemp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保留剩余未反转的链表")]),t._v("\n    cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点的next指向prev")]),t._v("\n    prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 做完上面一步后 把当前的节点设置为prev，供下次迭代作为prev使用")]),t._v("\n    cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextTemp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将当前指针指向剩余未反转的链表")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);