(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{528:function(t,e,a){t.exports=a.p+"assets/img/vue-life.a43f857b.png"},529:function(t,e,a){t.exports=a.p+"assets/img/init-vue.c356e010.png"},530:function(t,e,a){t.exports=a.p+"assets/img/order.183cead2.png"},885:function(t,e,a){"use strict";a.r(e);var s=a(14),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"vue2-0-生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue2-0-生命周期"}},[t._v("#")]),t._v(" vue2.0 生命周期")]),t._v(" "),s("p",[t._v("Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。")]),t._v(" "),s("h3",{attrs:{id:"生命周期钩子函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子函数"}},[t._v("#")]),t._v(" 生命周期钩子函数")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("beforeCreate：组件刚被创建，组件属性计算之前")])]),t._v(" "),s("li",[s("p",[t._v("created：组件实例创建完成，属性已绑定， 但真实 dom 还没有生成，$el 还不可用,但是 data 和 method 可用")])]),t._v(" "),s("li",[s("p",[t._v("beforeMount：此时已经完成了模板的编译，在页面挂载开始之前被调用, 相关的 render 函数首次被调用")])]),t._v(" "),s("li",[s("p",[t._v("mounted：已经将编译好的模板，挂载到了页面指定的容器中显示,可操作 DOM（最早）")])]),t._v(" "),s("li",[s("p",[t._v("beforeUpdate：状态更新之前执行此函数，此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，此时还没有开始重新渲染 DOM 节点")])]),t._v(" "),s("li",[s("p",[t._v("updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！")])]),t._v(" "),s("li",[s("p",[t._v("beforeDestroy：实例销毁之前调用。在这一步，实例（data,methods,过滤器，指令）仍然完全可用。")]),t._v(" "),s("blockquote",[s("p",[t._v("使用场景：(日期在我点击查询的时候要存储,刷新就读内存,但是我点击其他页面再进来的时候,这个内存要清空)")])])]),t._v(" "),s("li",[s("p",[t._v("destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。")])]),t._v(" "),s("li",[s("p",[t._v("activited keep-alive 专属，组件被激活时调用")])]),t._v(" "),s("li",[s("p",[t._v("deactivated keep-alive 专属，组件被销毁时调用")])])]),t._v(" "),s("h3",{attrs:{id:"在哪个钩子函数中调用接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在哪个钩子函数中调用接口"}},[t._v("#")]),t._v(" 在哪个钩子函数中调用接口")]),t._v(" "),s("p",[t._v("可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),t._v(" "),s("p",[t._v("能更快获取到服务端数据，减少页面  loading 时间；\nssr  不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；")]),t._v(" "),s("h3",{attrs:{id:"在什么阶段才能访问操作-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在什么阶段才能访问操作-dom"}},[t._v("#")]),t._v(" 在什么阶段才能访问操作 DOM？")]),t._v(" "),s("p",[t._v("在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。")]),t._v(" "),s("p",[t._v("需要注意的是，在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。")]),t._v(" "),s("p",[t._v("注意：mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 "),s("code",[t._v("vm.$nextTick")])]),t._v(" "),s("p",[t._v("vue 具体的生命周期示意图可以参见如下，理解了整个生命周期各个阶段的操作，关于生命周期相关的面试题就难不倒你了。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(528),alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"父组件可以监听到子组件的生命周期吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父组件可以监听到子组件的生命周期吗"}},[t._v("#")]),t._v(" 父组件可以监听到子组件的生命周期吗？")]),t._v(" "),s("p",[t._v("比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parent.vue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("\nChild @mounted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSomething"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Child.vue")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mounted"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parent.vue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child @hook"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mounted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSomething"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Child"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'父组件监听到 mounted 钩子函数 ...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Child.vue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'子组件触发 mounted 钩子函数 ...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上输出顺序为：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子组件触发 mounted 钩子函数 ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父组件监听到 mounted 钩子函数 ...")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。")]),t._v(" "),s("h3",{attrs:{id:"何时需要使用-beforedestroy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时需要使用-beforedestroy"}},[t._v("#")]),t._v(" 何时需要使用 beforeDestroy")]),t._v(" "),s("ul",[s("li",[t._v("① 解绑自定义事件 event.$off")]),t._v(" "),s("li",[t._v("② 消除定时器")]),t._v(" "),s("li",[t._v("③ 解绑自定义的 DOM 事件 如 window.scroll 等")])]),t._v(" "),s("h3",{attrs:{id:"父子组件生命周期钩子函数执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父子组件生命周期钩子函数执行顺序"}},[t._v("#")]),t._v(" 父子组件生命周期钩子函数执行顺序？")]),t._v(" "),s("p",[t._v("beforeCreate 不能访问到 methods、data、computed、watch 上的方法和数据")]),t._v(" "),s("p",[t._v("created 可以调用 methods 中定义的方法，修改 data 的数据，并且可触发响应式变化、computed 值重新计算，watch 到变更等")]),t._v(" "),s("blockquote",[s("p",[t._v("Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("加载渲染过程")]),t._v(" "),s("blockquote",[s("p",[t._v("父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted")])])]),t._v(" "),s("li",[s("p",[t._v("子组件更新过程")]),t._v(" "),s("blockquote",[s("p",[t._v("父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated")])])]),t._v(" "),s("li",[s("p",[t._v("父组件更新过程")]),t._v(" "),s("blockquote",[s("p",[t._v("父 beforeUpdate -> 父 updated")])])]),t._v(" "),s("li",[s("p",[t._v("销毁过程")]),t._v(" "),s("blockquote",[s("p",[t._v("父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed")])])])]),t._v(" "),s("h3",{attrs:{id:"computed、watch-执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed、watch-执行顺序"}},[t._v("#")]),t._v(" computed、watch 执行顺序")]),t._v(" "),s("p",[t._v("在 created 之前就会 就会进行初始化 computed 和 watch")]),t._v(" "),s("p",[s("img",{attrs:{src:a(529),alt:"image"}})]),t._v(" "),s("p",[t._v("看以下执行顺序图可以得出：")]),t._v(" "),s("ol",[s("li",[t._v("初始化时父元素 向 子元素传递数据分两个阶段，")])]),t._v(" "),s("p",[t._v("(1) 一为父元素父 beforeMount 及之前的一个阶段，包括 data 中定义的赋值；")]),t._v(" "),s("p",[t._v("(2) 另一个阶段为，父元素 mounted 及其之后的阶段；在一个阶段中后面的赋值会替换前面的赋值；（如：父 created 覆盖父 data 中定义的），所以 watch 和 computed 会触发两次；")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("watch 有 immediate 属性： 首次绑定的时候，是否执行 handler，默认 false")])]),t._v(" "),s("p",[t._v("(1) 为 true 时，在子元素的 created 之前执行;")]),t._v(" "),s("p",[t._v("(2) 为 false 时 只有在父元素 mounted 之后值改变才会触发，否则是不会触发的；")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("computed 执行值 computed 被引用处（数据变更时 watch 在 computed 之前执行），然后继续执行 computed 代码；computed 最早在 created 之后执行；")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(530),alt:"image"}})]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("参考："),s("a",{attrs:{href:"https://www.cnblogs.com/voxov/p/15231725.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("父子组件生命周期、watch、computed 的执行顺序"),s("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);